// Code generated by go-bindata.
// sources:
// ../../assets/db/postgres/create.sql
// ../../assets/db/postgres/truncate.pgsql
// DO NOT EDIT!

package assets_db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbPostgresCreateSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4f\x4f\x02\x31\x10\xc5\xef\xfd\x14\x2f\x9c\x34\xe1\x1b\x70\x5a\xb4\x9a\x46\x04\xb2\xbb\x07\x38\x91\xba\x0c\xd0\xd8\x76\xb5\x7f\xa2\xf1\xd3\x9b\x96\x5d\x05\x5c\xec\xad\xf3\x66\xe6\xf7\xde\xb0\xbb\x92\x17\x35\x07\x5f\xd5\x7c\x5e\x89\xc5\x1c\xe2\x01\xf3\x45\x0d\xbe\x12\x55\x5d\xa1\x51\x81\x3e\xc3\x84\x31\x76\x5f\x2e\x96\xa8\x8b\xe9\x8c\xa7\x96\x4e\x0e\x07\x47\x72\x3b\x19\x16\x77\xad\x8b\xe6\x8a\x36\x8a\x9e\xdc\x68\xc2\x7a\xfe\x51\x3f\x56\x71\xc3\x00\xab\x9a\x57\x2b\x0d\x75\x0e\xb0\x2c\xc5\x73\x51\xae\xf1\xc4\xd7\x63\x06\xec\xa2\xd6\x59\x4e\x62\x2a\xc8\x97\x36\x86\x9f\x1f\x19\xa9\x74\x3f\x1a\xad\x7a\x8f\x04\xdb\x06\xd8\xa8\x35\xbb\xbd\xc4\x66\xa3\x99\x9a\xf8\x9b\x84\x06\xfa\x69\x47\x3b\x72\x64\x1b\xf2\x9d\xbd\xb4\xdf\xeb\xb8\x47\xf7\x86\x0d\x06\x15\x34\x75\x1d\x59\xbf\x8e\x3f\x1e\x31\xf3\xd5\x16\x53\xf1\x58\xf1\x52\x14\xb3\xcb\x8d\x99\x39\x1c\x09\xf9\x24\x29\xc5\xe6\xb4\xeb\xc4\x7a\x16\xc7\x67\x09\xff\xcb\xd7\x38\x92\x81\xb6\x08\xca\x90\x0f\xd2\xbc\xe1\x43\x85\x43\xfe\xe2\xab\xb5\xf4\x9b\xf0\x2c\x5b\x2a\x1b\xf2\x5e\xee\xe9\x4f\xe8\xef\x00\x00\x00\xff\xff\x04\x10\xfe\xd2\x6a\x02\x00\x00")

func dbPostgresCreateSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbPostgresCreateSql,
		"db/postgres/create.sql",
	)
}

func dbPostgresCreateSql() (*asset, error) {
	bytes, err := dbPostgresCreateSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/postgres/create.sql", size: 618, mode: os.FileMode(436), modTime: time.Unix(1540130448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbPostgresTruncatePgsql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x09\x0a\xf5\x73\x76\x0c\x71\x55\xf0\xf7\xf3\x89\x54\x50\x2a\x2d\x4e\x2d\x52\xd2\x51\x48\xcb\x2f\x2a\xcd\xd5\x51\x28\xc9\x28\x4a\x4d\x4c\xb1\x06\x04\x00\x00\xff\xff\x8d\x30\x9a\x58\x24\x00\x00\x00")

func dbPostgresTruncatePgsqlBytes() ([]byte, error) {
	return bindataRead(
		_dbPostgresTruncatePgsql,
		"db/postgres/truncate.pgsql",
	)
}

func dbPostgresTruncatePgsql() (*asset, error) {
	bytes, err := dbPostgresTruncatePgsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/postgres/truncate.pgsql", size: 36, mode: os.FileMode(436), modTime: time.Unix(1540130448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/postgres/create.sql": dbPostgresCreateSql,
	"db/postgres/truncate.pgsql": dbPostgresTruncatePgsql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"postgres": &bintree{nil, map[string]*bintree{
			"create.sql": &bintree{dbPostgresCreateSql, map[string]*bintree{}},
			"truncate.pgsql": &bintree{dbPostgresTruncatePgsql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

