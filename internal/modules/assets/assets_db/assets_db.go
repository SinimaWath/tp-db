// Code generated by go-bindata.
// sources:
// ../../assets/db/postgres/0000-base.sql
// ../../assets/db/sqlite3/0000-base.sql
// DO NOT EDIT!

package assets_db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbPostgres0000BaseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\x49\x2c\xce\x2e\x56\xd0\xe0\x52\x50\xc8\x4c\x51\x80\x03\x27\x4f\xf7\x60\xd7\x20\x4f\x47\x1f\x85\x80\x20\x4f\x5f\xc7\xa0\x48\x05\x6f\xd7\x48\x1d\x2e\x05\x85\x94\xd4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x85\x10\xd7\x88\x10\x90\x58\x72\x7e\x6e\x41\x4e\x6a\x49\x2a\x48\xbf\x93\xbf\xbf\x0f\x97\xa6\x35\x17\x20\x00\x00\xff\xff\xfb\x27\xbf\xac\x73\x00\x00\x00")

func dbPostgres0000BaseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbPostgres0000BaseSql,
		"db/postgres/0000-base.sql",
	)
}

func dbPostgres0000BaseSql() (*asset, error) {
	bytes, err := dbPostgres0000BaseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/postgres/0000-base.sql", size: 115, mode: os.FileMode(436), modTime: time.Unix(1539514790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbSqlite30000BaseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x0a\xc2\x30\x10\x87\xf1\xfd\x9e\xe2\x3f\x2a\xda\x27\x70\x4a\xcb\x21\xc1\x36\x91\xe3\x0a\x76\x2c\x6d\x90\xa0\xb5\xa1\xc9\xfb\x23\x3a\xf4\x1b\xbf\xe1\x57\x55\x38\x2d\xf1\xb9\x8d\x25\xa0\x4f\xd4\x08\x1b\x65\xa8\xa9\x5b\x46\x19\xf3\x2b\xe3\x40\x40\x9c\xb1\x67\x9d\xf2\x95\x05\x77\xb1\x9d\x91\x01\x37\x1e\x60\x7a\xf5\xd6\x35\xc2\x1d\x3b\x3d\x13\x30\x87\x3c\x6d\x31\x95\xb8\x7e\xa0\xfc\xf8\xbf\x69\x5d\xd2\x3b\x94\xf0\xb3\x6a\xef\x5b\x3a\x5e\xe8\x1b\x00\x00\xff\xff\x1d\xdc\x31\x04\x7f\x00\x00\x00")

func dbSqlite30000BaseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSqlite30000BaseSql,
		"db/sqlite3/0000-base.sql",
	)
}

func dbSqlite30000BaseSql() (*asset, error) {
	bytes, err := dbSqlite30000BaseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sqlite3/0000-base.sql", size: 127, mode: os.FileMode(436), modTime: time.Unix(1539514790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/postgres/0000-base.sql": dbPostgres0000BaseSql,
	"db/sqlite3/0000-base.sql": dbSqlite30000BaseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"postgres": &bintree{nil, map[string]*bintree{
			"0000-base.sql": &bintree{dbPostgres0000BaseSql, map[string]*bintree{}},
		}},
		"sqlite3": &bintree{nil, map[string]*bintree{
			"0000-base.sql": &bintree{dbSqlite30000BaseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

